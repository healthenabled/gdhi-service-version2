name: CI/CD Pipeline
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
jobs:
  continuous-integration:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_DB: gdhi_test
          POSTGRES_USER: gdhi_test
          POSTGRES_PASSWORD: ${{ secrets.TEST_DB_PASSWORD }}

        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
    steps:
      - name: check out code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: grant permissions
        run: chmod +x gradlew

      - name: Add UUID extension
        run: |
          export PGPASSWORD=${{ secrets.TEST_DB_PASSWORD }}
          psql -h localhost -p 5432 -d gdhi_test -U 'gdhi_test' -c "CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";"

      - name: Run all tests
        run: ./gradlew clean build -x bootJar -PappVersion=${{ secrets.APPLICATION_VERSION }}

  upload-artifact-to-s3:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [ continuous-integration ]
    steps:
      - name: check out code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: grant permissions
        run: chmod +x gradlew

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Fetch Application Version from AWS parameter store
        run: echo "APPLICATION_VERSION=`aws ssm get-parameters --name 'qaBuildNumberForService' --query Parameters[0].Value`" >> $GITHUB_ENV;

      - name: Remove quotes from string
        run: APPLICATION_VERSION=`echo ${{ env.APPLICATION_VERSION }} | tr -d '"'` >> $GITHUB_ENV;

      - name: Create fat jar for GDHI-Backend-v2
        run: ./gradlew clean bootJar
        env:
          APPLICATION_VERSION: ${{ env.APPLICATION_VERSION }}

      - name: Upload Fat Jar to s3
        working-directory: ${{ secrets.JAR_LOCATION }}
        run: aws s3 cp gdhi-*.jar s3://${{ secrets.AWS_S3_BUCKET_NAME }}/${{ secrets.AWS_S3_FOLDER }}

      - name: Display build number
        run: echo "${{ env.APPLICATION_VERSION }}"

      - name: Increment Application Version Number
        run: echo "APPLICATION_VERSION=`expr ${{ env.APPLICATION_VERSION }} + 1`" >> $GITHUB_ENV;

      - name: Update Application Version Number in AWS Parameter Store
        run: aws ssm put-parameter --name "qaBuildNumberForService" --value ${{ env.APPLICATION_VERSION }} --overwrite;

  deploy-to-qa:
    runs-on: ubuntu-latest
    needs: [ upload-artifact-to-s3 ]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create CodeDeploy Deployment for QA
        id: deploy
        run: |
          aws deploy create-deployment \
            --application-name ${{ secrets.AWS_APPLICATION_NAME }} \
            --deployment-group-name ${{ secrets.AWS_QA_DEPLOYMENT_GROUP }} \
            --deployment-config-name CodeDeployDefault.OneAtATime \
            --github-location repository=${{ github.repository }},commitId=${{ github.sha }} \
            --ignore-application-stop-failures

  run-automation-testsuite:
    runs-on: ubuntu-latest
    needs: [ deploy-to-qa ]
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Check out code from gdhi-automation-version2
        uses: actions/checkout@v3
        with:
          repository: healthenabled/gdhi-automation-version2
          ref: "master"
          path: gdhi-automation-version2

      - name: grant permissions
        working-directory: gdhi-automation-version2
        run: chmod +x gradlew

      - name: Install curl
        run: sudo apt install curl

      - name: Install Gauge
        run: curl -SsL https://downloads.gauge.org/stable | sh

      - name: Run test suite for backend
        working-directory: gdhi-automation-version2
        run: ./gradlew clean gauge -Ptags='api'
        continue-on-error: true
