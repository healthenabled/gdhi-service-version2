name: CI/CD Pipeline
on:
  push:
    branches: [ "main","cicd" ]
  pull_request:
    branches: [ "main" ]
jobs:
  continuous-integration:
    runs-on: ubuntu-latest
    steps:
      - name: check out code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: grant permissions
        run : chmod +x gradlew

      - name: Run tests without integration and repository tests
        run: ./gradlew clean build -x bootJar -DincludeIntegrationTestAndRepositoryTest=false -PappVersion=${{ secrets.APPLICATION_VERSION }}

      - name: Create fat jar for GDHI-Backend-v2
        run: ./gradlew clean bootJar -PappVersion=${{ secrets.APPLICATION_VERSION }}

      - run: pwd
      - run: cd build/libs;ls;

      - name: Update the version number
        uses: gliech/create-github-secret-action@v1
        with:
          name: APPLICATION_VERSION
          value: $((${{ secrets.APPLICATION_VERSION }} + 1))
          pa_token: ${{ secrets.PA_TOKEN }}


      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Upload Artifact to s3
        working-directory: ${{ secrets.JAR_LOCATION }}
        run: aws s3 cp /build/libs/*.jar s3://${{ secrets.AWS_S3_BUCKET_NAME }}/${{ secrets.AWS_S3_FOLDER }}


  deploy-to-qa:
    runs-on: ubuntu-latest
    needs: [ continuous-integration ]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/cicd' || github.ref == 'refs/heads/cicd'
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create CodeDeploy Deployment for QA
        id: deploy
        run: |
          aws deploy create-deployment \
            --application-name ${{ secrets.AWS_APPLICATION_NAME }} \
            --deployment-group-name ${{ secrets.AWS_QA_DEPLOYMENT_GROUP }} \
            --deployment-config-name CodeDeployDefault.OneAtATime \
            --github-location repository=${{ github.repository }},commitId=${{ github.sha }} \
            --ignore-application-stop-failures

  deploy-to-showcase:
    runs-on: ubuntu-latest
    environment: SHOWCASE
    needs: [ deploy-to-qa ]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/cicd'
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create CodeDeploy Deployment for Showcase
        id: deploy
        run: |
          aws deploy create-deployment \
            --application-name ${{ secrets.AWS_APPLICATION_NAME }} \
            --deployment-group-name ${{ secrets.AWS_SHOWCASE_DEPLOYMENT_GROUP }} \
            --deployment-config-name CodeDeployDefault.OneAtATime \
            --github-location repository=${{ github.repository }},commitId=${{ github.sha }} \
            --ignore-application-stop-failures  

  deploy-to-prod:
    runs-on: ubuntu-latest
    environment: PROD
    needs: [ deploy-to-showcase ]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/cicd'
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create CodeDeploy Deployment to Prod
        id: deploy
        run: |
          aws deploy create-deployment \
            --application-name ${{ secrets.AWS_APPLICATION_NAME }} \
            --deployment-group-name ${{ secrets.AWS_PROD_DEPLOYMENT_GROUP }} \
            --deployment-config-name CodeDeployDefault.OneAtATime \
            --github-location repository=${{ github.repository }},commitId=${{ github.sha }} \
            --ignore-application-stop-failures
